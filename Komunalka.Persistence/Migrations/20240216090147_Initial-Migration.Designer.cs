// <auto-generated />
using System;
using Komunalka.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Komunalka.Persistence.Migrations
{
    [DbContext(typeof(KomunalkaContext))]
    [Migration("20240216090147_Initial-Migration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Accidents.Model.Accident", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Casualties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reasons")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accidents");
                });

            modelBuilder.Entity("Protocols.Model.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Decided")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Heard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("ProtocolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Protocols.Model.Protocol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Protocols");
                });

            modelBuilder.Entity("Accidents.Model.Accident", b =>
                {
                    b.OwnsOne("Accidents.Model.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("AccidentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AdditionalAddress")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AccidentId");

                            b1.ToTable("Accidents");

                            b1.WithOwner()
                                .HasForeignKey("AccidentId");
                        });

                    b.OwnsOne("Accidents.Model.Coordinates", "Coordinates", b1 =>
                        {
                            b1.Property<Guid>("AccidentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double?>("ManuallyCorrectedLatitude")
                                .HasColumnType("float");

                            b1.Property<double?>("ManuallyCorrectedLongitude")
                                .HasColumnType("float");

                            b1.Property<double?>("OriginalLatitude")
                                .HasColumnType("float");

                            b1.Property<double?>("OriginalLongitude")
                                .HasColumnType("float");

                            b1.Property<double?>("ShiftedLatitude")
                                .HasColumnType("float");

                            b1.Property<double?>("ShiftedLongitude")
                                .HasColumnType("float");

                            b1.HasKey("AccidentId");

                            b1.ToTable("Accidents");

                            b1.WithOwner()
                                .HasForeignKey("AccidentId");
                        });

                    b.OwnsOne("Accidents.Model.Environment", "Environment", b1 =>
                        {
                            b1.Property<Guid>("AccidentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Constructions")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool?>("IsPlaceOfAccidentConcentration")
                                .HasColumnType("bit");

                            b1.Property<string>("Lighting")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("NotParsed")
                                .HasColumnType("bit");

                            b1.Property<string>("RoadElements")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SurfaceCondition")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SurfaceType")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TrafficTools")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Weather")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AccidentId");

                            b1.ToTable("Accidents");

                            b1.WithOwner()
                                .HasForeignKey("AccidentId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Coordinates");

                    b.Navigation("Environment");
                });

            modelBuilder.Entity("Protocols.Model.Item", b =>
                {
                    b.HasOne("Protocols.Model.Protocol", "Protocol")
                        .WithMany("Items")
                        .HasForeignKey("ProtocolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Protocol");
                });

            modelBuilder.Entity("Protocols.Model.Protocol", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
